name: Build Image and Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name'
        required: true
        default: 'v0.2.0'
        type: string
      push_to_ghcr:
        description: 'Push Docker image to GitHub Container Registry (GHCR)'
        required: false
        default: true
        type: boolean
      build_sif:
        description: 'Build Apptainer (SIF) image'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:


      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check if tag already exists
        run: |
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          echo "Checking if tag '$TAG_NAME' already exists..."
          
          # Check if tag exists locally or remotely
          if git tag -l | grep -q "^${TAG_NAME}$"; then
            echo "❌ Error: Tag '$TAG_NAME' already exists locally!"
            exit 1
          fi
          
          # Check if tag exists on remote
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG_NAME}$"; then
            echo "❌ Error: Tag '$TAG_NAME' already exists on remote!"
            exit 1
          fi
          
          echo "✅ Tag '$TAG_NAME' does not exist. Proceeding with build..."
      
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false
          
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Set up Apptainer
        uses: eWaterCycle/setup-apptainer@v2

      - name: Login to GitHub Container Registry
        if: ${{ github.event.inputs.push_to_ghcr }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run download script
        run: |
          echo "Start Downloading"
          chmod +x download.sh
          ./download.sh

      - name: Run build script
        run: |
          echo "Start Building"
          chmod +x build.sh
          
          # Extract CUDA base image tag from Dockerfile
          CUDA_TAG=$(grep -oP 'FROM nvidia/cuda:\K[^ ]+' Dockerfile)
          echo "Extracted CUDA_TAG: $CUDA_TAG"
          
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME_LOWER=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          BUILD_COMMAND="./build.sh --rmi --tag=ghcr.io/${REPO_OWNER_LOWER}/${REPO_NAME_LOWER}:${{ github.event.inputs.tag_name }}-cuda-${CUDA_TAG}"
          if ${{ github.event.inputs.push_to_ghcr == true }}; then
            BUILD_COMMAND+=" --push"
          fi
          if ${{ github.event.inputs.build_sif == true }}; then
            BUILD_COMMAND+=" --sif"
          fi
          
          echo "Running build command: $BUILD_COMMAND"
          eval "$BUILD_COMMAND"
          
          # Only execute apptainer command if SIF was built
          if ${{ github.event.inputs.build_sif == true }}; then
            apptainer exec --no-init ai-dev-env.sif bash -c "echo 'Build completed successfully!'"
          fi

      - name: Split SIF file into volumes
        if: ${{ github.event.inputs.build_sif == true }}
        run: |
          echo "Splitting SIF file into 1900MB volumes..."
          split -b 1900M ai-dev-env.sif ai-dev-env.sif.part.
          rm ai-dev-env.sif
          ls -la ai-dev-env.sif.part.*

      - name: Generate release notes
        id: release_notes
        run: |
          TAG_NAME="${{ github.event.inputs.tag_name }}"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          BUILD_SIF="${{ github.event.inputs.build_sif }}"
          
          RELEASE_BODY="# AI Development Environment ${TAG_NAME}\n\n"
          
          if [ "$BUILD_SIF" = "true" ]; then
            # Get list of split files
            SPLIT_FILES=$(ls ai-dev-env.sif.part.* | sort)
            
            # Generate wget commands for each split file
            WGET_COMMANDS=""
            for file in $SPLIT_FILES; do
              WGET_COMMANDS="${WGET_COMMANDS}wget https://github.com/${REPO_OWNER}/${REPO_NAME}/releases/download/${TAG_NAME}/${file}"$'\n'
            done
            
            RELEASE_BODY+="This release contains the AI development environment SIF file, split into multiple parts due to GitHub's file size limitations.\n\n"
            RELEASE_BODY+="## Quick Download and Setup\n\n"
            RELEASE_BODY+="### Method 1: Download all parts and reassemble\n"
            RELEASE_BODY+="\`\`\`bash\n"
            RELEASE_BODY+="# Download all split files\n"
            RELEASE_BODY+="${WGET_COMMANDS}"
            RELEASE_BODY+="\n" # 添加一个空行，以改善排版
            RELEASE_BODY+="# Reassemble the SIF file\n"
            RELEASE_BODY+="cat ai-dev-env.sif.part.* > ai-dev-env.sif\n\n"
            RELEASE_BODY+="# Clean up split files (optional)\n"
            RELEASE_BODY+="rm ai-dev-env.sif.part.*\n"
            RELEASE_BODY+="\`\`\`\n\n"
            RELEASE_BODY+="## Usage\n"
            RELEASE_BODY+="After reassembling the SIF file, you can use it with Apptainer/Singularity:\n"
            RELEASE_BODY+="\`\`\`bash\n"
            RELEASE_BODY+="# Run interactive shell\n"
            RELEASE_BODY+="apptainer shell ai-dev-env.sif\n\n"
            RELEASE_BODY+="# Execute specific command\n"
            RELEASE_BODY+="apptainer exec ai-dev-env.sif <your-command>\n"
            RELEASE_BODY+="\`\`\`\n\n"
            RELEASE_BODY+="## File Information\n"
            RELEASE_BODY+="- **Original file**: ai-dev-env.sif\n"
            RELEASE_BODY+="- **Split into**: $(echo "$SPLIT_FILES" | wc -l) parts\n"
          else
            RELEASE_BODY+="This release is for the AI development environment Docker image.\n\n"
          fi
          
          RELEASE_BODY+="- **Repository**: ${REPO_OWNER}/${REPO_NAME}\n"
          RELEASE_BODY+="- **Version**: ${TAG_NAME}\n"
          
          echo "$RELEASE_BODY" > release_body.md

      - name: Create Release and Upload Files
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ github.event.inputs.build_sif == true && 'ai-dev-env.sif.part.*' || '' }}
          tag_name: ${{ github.event.inputs.tag_name }}
          body_path: release_body.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
